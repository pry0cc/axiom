#!/usr/bin/env bash

###################################################################
# Title : axiom-exec
#
#Description:
#  Evaluate shell one-liners or execute single commands on one or more instances in parallel                                                                                                                      
#  Expand local and remote environment variables respectively                                                                                                                                                     
#  Specify the fleet prefix, or let axiom use selected.conf by default (located in ~/.axiom/selected.conf)                                                                                                        
#  Optionally execute command(s) in a detached tmux session on the remote instances (commands run in the background)                                                                                              
#  Temporarily prevent axiom's SSH key regeneration and instead connect with a cached SSH config (default is ~/.axiom/.sshconfig)                                                                                 
#Examples:                                                                                                                                                                                                        
#  axiom-exec id # Execute command id across all instances currently selected.conf (located in ~/.axiom/selected.conf)
#  axiom-exec ifconfig --fleet testy # Execute ifconfig on testy fleet. Automatically select all instances in fleet testy
#  axiom-exec sleep "$(($RANDOM % 10))" "&& id &&" echo $HOSTNAME --fleet stok # Evaluate complex one-liners on fleet stok
#  axiom-exec 'sudo apt dist-upgrade -y' -q --cache --fleet OtherFleet --tmux MySession01 # Quietly execute command(s) inside a detacted tmux session on the remote instances with custom session name
#  axiom-exec whoami -q --cache --sshconfig ~/.axiom/log/exec/axiom-exec+1234567890/sshconfig --fleet oldfleet --tmux # Specify the axiom SSH config to use (default is ~/.axiom/.sshconfig)
#Usage:
#  <commands> required string
#    Command(s) to run on the remote axiom instances, multiple commands can be wrapped in single or double quotes, but not required
#  -f/--fleet <fleet prefix>
#    Fleet prefix to execute on (default is ~/.axiom/selected.conf). Automatic wildcard support
#  -i/--instance <instance name>
#    Single instance to execute on
#  --tmux <optional tmux session name>
#    Execute commands in a detacted tmux session (commands run in the background). The default tmux session name is axiom-exec+$TIMESTAMP, or supply a custom tmux session name
#  --sshconfig <sshconfig_file> (optional string)
#    Path to axiom's SSH config (default is ~/.axiom/.sshconfig)
#  -q/--quiet
#    Disable progress bar, and reduce verbosity
#  --debug
#    Enable debug mode (VERY VERBOSE!)
#  --cache
#    Temporarily do not generate SSH config and instead connect with cached SSH config
#  --logs
#    Do not delete logs (logs will be stored in ~/.axiom/logs/exec/axiom-exec$TIMESTAMP)
#  --help
#    Display this help menu

###########################################################################################################
# Header
#
AXIOM_PATH="$HOME/.axiom"
source "$AXIOM_PATH/interact/includes/vars.sh"
source "$AXIOM_PATH/interact/includes/functions.sh"
source "$AXIOM_PATH/interact/includes/system-notification.sh"
begin=$(date +%s)
start="$(pwd)"
BASEOS="$(uname)"
account_path=$(ls -la "$AXIOM_PATH"/axiom.json | rev | cut -d " " -f 1 | rev)
accounts=$(ls -l "$AXIOM_PATH/accounts/" | grep "json" | grep -v 'total ' | awk '{ print $9 }' | sed 's/\.json//g')
current=$(ls -lh ~/.axiom/axiom.json | awk '{ print $11 }' | tr '/' '\n' | grep json | sed 's/\.json//g') > /dev/null 2>&1
case $BASEOS in
'Darwin')
    PATH="$(brew --prefix coreutils)/libexec/gnubin:$PATH"
    ;;
*) ;;
esac

###########################################################################################################
# Declare defaut variables
#
set=false
sshkey=$(cat "$AXIOM_PATH/axiom.json" | jq -r '.sshkey | select( . != null )')
cache=false
quiet=false
starttime=$(date +"%F-TIME-%T")
uid="axiom-exec+$(date +%s)"
tmp="$AXIOM_PATH/tmp/exec/$uid"
logs="$AXIOM_PATH/logs/exec/$uid"
sshconfig="$AXIOM_PATH/.sshconfig"
debug=false
nobar=false
use_tmux=false
instance=false
keep_logs=false

###########################################################################################################
# Help Menu:
# TODO add sshkey option to specify ssh key used to authenticate
# TODO add executing commands from a file
# TODO add axiom-scp extention for arb upload and download
#
function usage() {
        echo -e "${BWhite}Description:"
        echo -e "  Evaluate shell one-liners or execute single commands on one or more instances in parallel" 
        echo -e "  Expand local and remote environment variables respectively"
        echo -e "  Specify the fleet prefix, or let axiom use selected.conf by default (located in ~/.axiom/selected.conf)"
        echo -e "  Optionally execute command(s) in a detached tmux session on the remote instances (commands run in the background)" 
        echo -e "  Temporarily prevent axiom's SSH key regeneration and instead connect with a cached SSH config (default is ~/.axiom/.sshconfig)" 
        echo -e "${BWhite}Examples:${Color_Off}"
        echo -e "  ${Blue}axiom-exec id ${Color_Off}# Execute command id across all instances currently selected.conf (located in ~/.axiom/selected.conf)"
        echo -e "  ${Blue}axiom-exec ifconfig --fleet testy ${Color_Off}# Execute ifconfig on testy fleet, automatically select all instances in fleet testy"
        echo -e "  ${Blue}"axiom-exec sleep '"$(($RANDOM '%' 10))"' '"&& id &&"' echo \$HOSTNAME --fleet stok "${Color_Off}# Evaluate complex one-liners on fleet stok" 
        echo -e "  ${Blue}axiom-exec 'sudo apt dist-upgrade -y' -q --cache --fleet OtherFleet --tmux MySession01 ${Color_Off}# Quietly execute command(s) inside a detacted tmux session on the remote instances with custom session name" 
        echo -e "  ${Blue}axiom-exec whoami -q --cache --sshconfig ~/.axiom/log/exec/axiom-exec+1234567890/sshconfig --fleet oldfleet --tmux ${Color_Off}# Specify the axiom SSH config to use (default is ~/.axiom/.sshconfig)"
        echo -e "${BWhite}Usage:${Color_Off}"
        echo -e "  <commands> required string"
        echo -e "    Command(s) to run on the remote axiom instances, multiple commands can be wrapped in single or double quotes, but not required"
        echo -e "  -f/--fleet <fleet prefix>"
        echo -e "    Fleet prefix to execute on (default is ~/.axiom/selected.conf). Automatic wildcard support"   
        echo -e "  -i/--instance <instance name>"
        echo -e "    Single instance to execute on"
        echo -e "  --tmux <optional tmux session name>"
        echo -e "    Execute commands in a detacted tmux session (commands run in the background). The default tmux session name is axiom-exec+\$TIMESTAMP, or supply a custom tmux session name"
        echo -e "  --sshconfig <sshconfig_file> (optional string)"
        echo -e "    Path to axiom's SSH config (default is ~/.axiom/.sshconfig)"
        echo -e "  -q/--quiet"
        echo -e "    Disable progress bar, and reduce verbosity"
        echo -e "  --debug"
        echo -e "    Enable debug mode (VERY VERBOSE!)"
        echo -e "  --cache"
        echo -e "    Temporarily do not generate SSH config and instead connect with cached SSH config"
        echo -e "  --logs"
        echo -e "    Do not delete logs (logs will be stored in ~/.axiom/logs/exec/axiom-exec\$TIMESTAMP)"
        echo -e "  --help"
        echo -e "    Display this help menu"
}

###########################################################################################################
# Parse command line arguments 
#
i=0
for arg in "$@"
do
    i=$((i+1))
    if [[  ! " ${pass[@]} " =~ " ${i} " ]]; then
        set=false
        if [[ "$arg" == "--fleet" ]] || [[ "$arg" == "-f" ]] ; then
            n=$((i+1))
            fleet=$(echo ${!n})
            set=true
            pass+=($i)
            pass+=($n)
        fi
        if [[ "$arg" == "--instance" ]] || [[ "$arg" == "-i" ]] ; then
            n=$((i+1))
            instance=$(echo ${!n})
            set=true
            pass+=($i)
            pass+=($n)
        fi
        if [[ "$arg" == "--tmux" ]]; then
            n=$((i+1))
            use_tmux=true
            tmux_session_name=$(echo ${!n})
            set=true
            pass+=($i)
            pass+=($n)
        fi
        if [[ "$arg" == "--sshconfig" ]]; then
            n=$((i+1))
            sshconfig=$(echo ${!n})
            set=true
            pass+=($i)
            pass+=($n)
        fi
        if [[ "$arg" == "--help" ]] || [[ "$arg" == "-h" ]]; then
            usage
            exit
            set=true
            pass+=($i)
        fi
        if [[ "$arg" == "--debug" ]]; then
            debug=true
            set=true
            pass+=($i)
        fi
        if [[ "$arg" == "--cache" ]]; then
            cache=true
            set=true
            pass+=($i)
        fi
        if [[ "$arg" == "--logs" ]]; then
            keep_logs=true
            set=true
            pass+=($i)
        fi
        if [[ "$arg" == "--quiet" ]] || [[ "$arg" == "-q" ]]; then
            nobar=true
            set=true
            pass+=($i)
        fi
        if  [[ "$set" != "true" ]]; then
            args="$args $arg"
        fi
    fi
done

###########################################################################################################
# clean_up
#
clean_up() {
kill -9 $pid >/dev/null 2>&1 
}

###########################################################################################################
# Debug Flag
#
if [[ "$debug" == "true" ]]; then
 set -xv
fi 

###########################################################################################################
# Display Help Menu
#
if [[ "$*" == "--help" ]] || [[ "$*" == "-h" ]] || [[ "$*" == "" ]]; then
 usage
 exit
fi

###########################################################################################################
# SSH Cache Flag
#
if [[ "$cache" == "false" ]]; then
 generate_sshconfig
fi

###########################################################################################################
# Store $args in $commands
# 
commands="$args"

###########################################################################################################
# If --tmux is in the command, connect to instance and spawn a new tmux session
#
if [[ $use_tmux == true ]] ;then
 if [[ -z ${tmux_session_name:+x} ]]; then
  tmux_session_name=$uid
 fi
 commands="tmux new-session -d -s $tmux_session_name \""$commands"\""
fi

###########################################################################################################
# Make a copy of the current SSH config plus selected.conf and use them for axiom-exec
#
mkdir -p "$tmp/logs"
printf "%s" "$commands" > "$tmp"/commands.txt
cat "$AXIOM_PATH/selected.conf" >> "$tmp/hosts"
cp "$sshconfig" "$tmp/sshconfig" 
sshconfig="$tmp/sshconfig"
total_instances="$(wc -l "$tmp/hosts" | awk '{ print $1 }')"

###########################################################################################################
# If --fleet isnt provided or has null value, default to selected.conf
#
if [[ -z ${fleet:+x} ]]; then
 instances=$(cat "$tmp/hosts")
else

###########################################################################################################
# If --fleet value is non-null and the value is a file, use selected from file
#
 if [[ -f "$fleet" ]] ; then
  instances=$(cat "$fleet")
  echo "$instances" | tr ' ' '\n' > "$tmp/hosts"
  total_instances="$(wc -l "$tmp/hosts" | awk '{ print $1 }')"
 
###########################################################################################################
# else it must the fleet name
#
else
  instances=$(query_instances_cache "$fleet*")
  echo "$instances" | tr ' ' '\n' > "$tmp/hosts"
  total_instances="$(wc -l "$tmp/hosts" | awk '{ print $1 }')"
 fi
fi

###########################################################################################################
# If --instance is provided, add it to total instances
#
if [[ $instance != false ]]; then
 name=$(query_instances_cache "$instance")
 echo "$name" | tr ' ' '\n' > "$tmp/hosts"
 total_instances="$(wc -l "$tmp/hosts" | awk '{ print $1 }')"
fi

###########################################################################################################
# Prepare the default SSH and interlace command and execute the user provided command in parallel
#
ssh_command="ssh -F $sshconfig -o StrictHostKeyChecking=no -o PasswordAuthentication=no"
interlace_cmd="$(which interlace) -tL $tmp/hosts -threads $total_instances"
interlace_cmd_nobar="$(which interlace) --no-bar -tL $tmp/hosts -threads $total_instances"

###########################################################################################################
# Prevents Interlace hangups from hijacking your terminal  
#
stty -echoctl
trap clean_up SIGINT SIGTERM

###########################################################################################################
# Disable progress bar, reduce verbosity, only terminal output of the command is returned to terminal
#
if [[ "$nobar" == "false" ]]; then
 $interlace_cmd -c "$ssh_command _target_ '$commands 1>&2'" 
 pid=$!
else
 $interlace_cmd_nobar -c "$ssh_command _target_  '$commands 1>&2'"
 pid=$!
fi

###########################################################################################################
# keep logs flag aka --logs
#
mv "$tmp" "$logs">/dev/null 2>&1
if [[ $keep_logs != true ]]; then
 rm -r $logs >/dev/null 2>&1
fi
