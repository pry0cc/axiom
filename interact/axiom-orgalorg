#!/usr/bin/env bash

###################################################################
# Title	: axiom-orgalorg                                                                                             
# About	: This is just a simple wrapper for a great tool, orgalorg (https://github.com/reconquest/orgalorg). 
# For more details on orgalorg visit the github or run orgalorg -h for the manual.                                                                                 
# The reason for axiom-orgalorg was to create a more reliable axiom-exec (https://github.com/pry0cc/axiom/blob/master/interact/axiom-exec), that had 
# better variable expansion and execution control.
# In addition to a more reliable axiom-exec, orgalorg also includes upload and download features, read the orgalorg --help page for more info.
#
# Examples: 
# Taking a file of commands and executing them in serial axiom-orgalorg -l -s commands
# Executing commands from STDIN: cat commands | axiom-orgalorg --stdin
# Execute commands listed from command line `axiom-orgalorg -C "id ; whoami ; hostname"
# Running commands against a specifc set of axiom instances or fleet: axiom-orgalorg -C id -i "jepsen01 jepsen02 jepsen03"
# Evaluating one liners : axiom-orgalorg -C 'sleep $(($RANDOM % 10)) &&  echo random sleep over'
#
# Author : 0xtavian                                                
# Github : https://github.com/0xtavian                                           
###################################################################

AXIOM_PATH="$HOME/.axiom"
source "$AXIOM_PATH/interact/includes/vars.sh"
source "$AXIOM_PATH/interact/includes/functions.sh"
source "$AXIOM_PATH/interact/includes/system-notification.sh"
begin=$(date +%s)
rm -r $HOME/.ssh/sockets > /dev/null 2>&1
start="$(pwd)"
BASEOS="$(uname)"

setuptools() {
# install orgalorg and gee
if ! [ -x "$(command -v orgalorg)" ]; then
 orgalorgbinary=$HOME/go/bin/orgalorg
if test -f "$orgalorgbinary"; then
 echo "Executing axiom-orgalorg"
else 
 echo "installing orgalorg https://github.com/reconquest/orgalorg"
 go get github.com/reconquest/orgalorg
fi
fi
}

cleanup() {
  trap - SIGINT SIGTERM ERR EXIT
  # script cleanup here
}
trap cleanup SIGINT SIGTERM ERR EXIT

script_dir=$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd -P)

function usage() {
    cat << EOF
    Usage: Experimental axiom-exec (axiom-orgalorg)
    Examples:
     Execute commands from a file, in serial mode : axiom-orgalorg -l -s commands.txt 
     Execute commands from STDIN :  cat commands.txt | axiom-orgalorg --stdin
     From command line : axiom-orgalorg -C "id ; whoami ; hostname"
     Against a specifc set of axiom instances or fleet : axiom-orgalorg -C id -i "jepsen01 jepsen02 jepsen03"
     Evaluating one liners : axiom-orgalorg -C 'sleep $(($RANDOM % 10)) &&  echo random sleep over'

     orgalorg --help for more info

    -l|--serial                Execute commands in serial (positional option)
    -v|--verbose               Increase verbosity (positional option)  
    -i|--instances             List of axiom instances to execute on, must be wrapped in double quotes (Defaults to ~/.axiom/selected.conf)    
    -C|--Command               Execute command across fleet, should be wrapped in double or single quotes
    -s|--stdin                 Take commands from STDIN or from a file
    -h|--help                  Display this help menu
EOF
exit 
}

msg() {
  echo >&2 -e "${1-}"
}

die() {
  local msg=$1
  local code=${2-1} # default exit status 1
  msg "$msg"
  exit "$code"
}

tmpfiles() {
# make tmp files to store data
uid="orgalorg+$(date +%s)"
tmp="$AXIOM_PATH/tmp/$uid"
mkdir -p "$tmp/input"
mkdir -p "$tmp/split"
mkdir -p "$tmp/output"
mkdir -p "$tmp/logs"
}

# take instances in axiom select or from command line and select them
generateSSHfile() {
if [[ $selected = 1 ]]; then
  for i in $(cat "$AXIOM_PATH/selected.conf");
  do instance_ip $i | tee -a "$tmp/ips" &>/dev/null;  done
 cat "$tmp/ips" | sed -e 's/^/op@/' | sed  s/$/:2266/ | tee -a "$tmp/hosts" &>/dev/null
else
  for i in $(echo $instances);
  do instance_ip $i | tee -a "$tmp/ips" &>/dev/null;  done
  cat "$tmp/ips" | sed -e 's/^/op@/' | sed  s/$/:2266/ | tee -a "$tmp/hosts" &>/dev/null
fi
}

executeorgalorg() {
# parse serial flag
if [[ $serial = 1 ]]; then
serial='-l'
else
serial=
fi

# check if stdin flag is provided
if [[ $stdin = 1 ]]; then
# if the stdin flag is provided check that /dev/stdin has content
if [ -p /dev/stdin ]; then
 $HOME/go/bin/orgalorg $serial -w -y -o "$tmp/hosts" -i /dev/stdin -C /bin/zsh 
  exit 1
else
# if the stdin flag is provided but /dev/stdin does not have content, execute commands from a file instead
 $HOME/go/bin/orgalorg $serial -w -y -o "$tmp/hosts" -i $command -C /bin/zsh 
fi fi

if [[ $stdin = 0 ]]; then
# execute command from command line
  $HOME/go/bin/orgalorg $serial -w -y -o "$tmp/hosts" -C $command 
fi
}

parse_params() {
  # default values of variables 
  serial=0
  stdin=0
  selected=1

  while :; do
    case "${1-}" in
    -h | --help) usage ;;
    -l | --serial) serial=1 ;;            
    -v | --verbose) set -x ;;
    -s | --stdin) stdin=1
    command="${2-}"
    shift # past argument
    ;;
    -i | --instances) selected=0 instances="${2-}"
    shift # past argument
    ;; # provided instances must be wrapped in double quotes
    -C | --Command) # pass commands to orgalorg 
      command="${2-}"
      shift
      ;;
    *) break ;;
    esac
    shift
  done

  args=("$@")

# check required params and arguments
if [[ -z "$command" && "$stdin" != 1 ]] ; 
then 
echo "You must supply a command in line with -C or from stdin with --stdin" 
usage
exit 1
fi

return 0
}
parse_params "$@"

# script logic here
main() {
setuptools
tmpfiles
generateSSHfile
executeorgalorg
echo -e "${BGreen}Local logs saved to '${Blue}$AXIOM_PATH/tmp/$uid${BGreen}'!${Color_Off}" 
}

main
