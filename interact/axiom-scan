#!/bin/bash

###########################################################################################################
# Header

AXIOM_PATH="$HOME/.axiom"
source "$AXIOM_PATH/interact/includes/vars.sh"
source "$AXIOM_PATH/interact/includes/functions.sh"
source "$AXIOM_PATH/interact/includes/system-notification.sh"
begin=$(date +%s)
mkdir -p $HOME/.ssh/sockets
start="$(pwd)"
BASEOS="$(uname)"
case $BASEOS in
'Linux')
    BASEOS='Linux'
    ;;
'FreeBSD')
    BASEOS='FreeBSD'
    alias ls='ls -G'
    ;;
'WindowsNT')
    BASEOS='Windows'
    ;;
'Darwin')
    BASEOS='Mac'
    ;;
'SunOS')
    BASEOS='Solaris'
    ;;
'AIX') ;;
*) ;;
esac
###########################################################################################################
# Functions
function formatSeconds (){
        declare format='%02dh:%02dm:%02ds'         # time format hh:mm:sshconfig
        declare timepassed=$1
        declare seconds minutes hours

        ((seconds=timepassed%60))
        ((minutes=timepassed/60))
        ((hours=minutes/60))
        ((minutes=minutes%60))
        printf "$format" $hours $minutes $seconds
}


function list_modules() {
	echo -e "${Green}Available Modules:${Color_Off}"
	(echo "MODULE,COMMAND"; find "$AXIOM_PATH/modules/" -name '*.json' -exec echo -n {}, \; -exec jq -r '.[0].command' {} \; | sed 's/\/home\/op\/.axiom\/modules\///g' | sed 's/\.json//g' ) | column -t -s, | perl -pe '$_ = "\033[0;37m$_\033[0;34m" if($. % 2)'
}

function parse_module() {
	module="$1"
	ext="$2"

	if [[ -f "$AXIOM_PATH/modules/$module.json" ]]; then
		if [[ "$ext" != "" ]]; then
			cat "$AXIOM_PATH/modules/$module.json" | jq -r ".[] | select(.ext==\"$ext\")"
		else
			cat "$AXIOM_PATH/modules/$module.json" | jq -r ".[0]"
		fi
	else
		echo -e "${BRed}Module '$module' does not exist...${Color_Off}"
		list_modules
	fi
}

function help() {
	echo -e "${BWhite}Usage of axiom-scan${Color_Off}"
	echo -e "Example Usage: ${Blue}axiom-scan ips.txt -m nmap -T4 --top-ports 2000 -oX output.xml${Color_Off}"
	echo -e "  <input> string"
	echo -e "    Input file, supplied as a positional first argument"
	echo -e "  -m string"
	echo -e "    Module to use to scan (e.g masscan, nmap, gowitness, ffuf)"
	echo -e "  -w /path/to/wordlist/on/instance"
	echo -e "    Wordlist to use to scan with (must be a path to a remote wordlist)"
  echo -e "  -wL /path/to/local"
	echo -e "    Wordlist Local to use to scan with (must be a path to a local wordlist)"
	echo -e "  --list"
	echo -e "    List available modules"
	echo -e "  -o string"
	echo -e "    Output to default output (whatever that is for the module)"
	echo -e "  -oX string"
	echo -e "    Output in XML/HTML, supported in (nmap & masscan)"
	echo -e "  -oG string"
	echo -e "    Output to greppable output (will merge and sort unique)"
	echo -e "  -oD string"
	echo -e "    Output to a directory"
	echo -e "  --fleet string (optional)"
	echo -e "    Fleet to use, will use axiom-select by default."
	echo -e "  --spinup int (optional)"
	echo -e "    How many instances to spin up"
  echo -e "  --rm-when-done (optional)"
	echo -e "    Delete selected instances when scan is complete."
  echo -e "  -F string (optional)"
  echo -e "    Custom SSH configuration file to launch fleet from"
  echo -e "  --debug"
  echo -e "    Enable debug mode (VERY VERBOSE!)"
  echo -e "  --quiet"
	echo -e "    Enable quiet mode"
	echo -e "  --help"
	echo -e "    Display this help menu"
	echo -e "  <additional args>"
	echo -e "    If you want additional arguments supplied to your command, simply append them to the command!"
}

clean_up() {
    # Perform program exit housekeeping
    echo -e "${Green}CTRL+C Interrupt, cleaning up and downloading output..${Color_Off}."
	if [[ "$command" =~ "_target_" ]]; then
        interlace --silent -threads $total -tL "$tmp/selected.conf" -c "$AXIOM_PATH/interact/axiom-scp _target_:/home/op/scan/$uid/output/* $tmp/output/ --cache -F=$sshconfig >> /dev/null"
	else
		interlace --silent -tL $tmp/hosts -c "axiom-scp _target_:/home/op/scan/$uid/output $tmp/output/_target_.$ext --cache -F=$sshconfig  >/dev/null 2>&1"
	fi
    merge_output
    mv "$AXIOM_PATH/tmp/$uid/" "$AXIOM_PATH/logs/"
    end=$(date +%s)
    runtime=$((end-begin))
    time=$(formatSeconds $runtime)
    echo -e "${Blue}Module [ $module $args ] | Time: [ $time ] | Input: [ $lines targets ]${Color_Off}"
    echo -e "${BGreen}Output saved to '${Blue}$outfile${BGreen}'! Local logs saved to '${Blue}$AXIOM_PATH/logs/$uid${BGreen}'! ${BGreen}Remote logs saved to '${Blue}/home/op/scan/$uid${BGreen}'!"
    echo "{\"module\":\"$module\",\"args\":\"$args\",\"targets\":\"$lines\",\"results\":\"$res\",\"seconds\":\"$runtime\",\"instances\":\"$total_instances\",\"commmand\":\"$command\",\"time\":\"$time\"}" >> $AXIOM_PATH/stats.log
    kill -9 $tailPID
#    axiom-exec "lsof /home/op/scan/${uid}/  | cut -d ' ' -f 2 | xargs sudo kill" -q
    exit $1
}

apply_wordlist() {
    command="$1"
    wordlist="$2"
    wordlist_escaped="$(echo "$wordlist" | sed 's/\//\\\//g')"

    echo "$command" | sed "s/_wordlist_/$wordlist_escaped/g"
}

add_extra_args() {
    command="$1"
    new_command=""
    args="$2"
    args_set="false"

    counter=0
    pieces="$(echo "$command" | grep -o "|" | wc -l | awk '{ print $1 }')"

    OLDIFS=$IFS
    IFS="|" 
    for piece in $command
    do
        if [[ "$piece" != "" ]] && [[ ! "$piece" =~ "cat" ]] && [[ ! "$piece" =~ "tee" ]] && [[ "$args_set" != "true" ]]; then
            new_command="$new_command $piece $args"
            args_set=""true
        else
            new_command="$new_command $piece"
        fi    

        if [[ "$counter" -lt "$pieces" ]]; then
            new_command="$new_command | "
            counter=$((counter+1))
        fi
    done

    IFS=$OLDIFS
    echo $new_command
}



split_file() {
    file="$1"
    divisor="$2"
    tmp="$3"

    lines="$(wc -l "$file" | awk '{ print $1 }')"
    lines_per_file=$(expr $lines / $divisor)

    [[ $(expr $lines % $divisor) != 0 ]] && lines_per_file=$(expr $lines_per_file + 1)
    cat "$file" | shuf > "$tmp/split/targets"

    cd "$tmp/split" && split -l $lines_per_file targets && rm targets && cd "$start"
    # Rename "xaa" etc  to 1 2 3 4 5
    i=1
    for f in $(find "$tmp/split/" -type f | tr '/' ' ' | awk '{ print $NF }')
    do
        instance="$(echo $instances | awk "{ print \$$i }")"
        i=$((i+1))

        mv "$tmp/split/$f" "$tmp/input/$instance"
    done

    total=$i
}


merge_output() {
    if [[ "$anew" != "true" ]];  then
        rm -rf "$outfile"
    fi
    if [[ "$ext" == "txt" ]]; then
        echo "Mode set to txt.. Sorting unique."
        touch "$tmp/output/place"
        cat $tmp/output/* | sort -u > $tmp/merge

        if [[ "$anew" == "true" ]]; then
            cat "$tmp/merge" | anew "$outfile"
        else
            mv "$tmp/merge" "$outfile"
        fi

    elif [[ "$ext" == "xml" ]]; then
        echo "Mode set to XML.. Merging Nmap XML output..."
        "$AXIOM_PATH/interact/merge-xml.py" -d "$tmp/output" -o "$tmp/merge.xml" >> /dev/null
        mv "$tmp/merge.xml" "$outfile"
        mv "$tmp/merge.xml.html" "$outfile.html"
    elif [[ "$ext" == "csv" ]]; then
        echo "Mode set to CSV, merging..."
        touch "$tmp/output/place"
        header="$(cat $tmp/output/* | head -n 1)"
        echo "$header" > "$outfile"
        cat $tmp/output/* | grep -v "$header" | sort -u -V >> "$outfile"
    elif [[ "$ext" == "" ]] || [[ "$ext" == "dir" ]];  then
        echo "Mode set to directory... Merging directories..."
        mkdir $tmp/merge
        
        if [[ "$command" =~ "_target_" ]]; then
            cp -r $tmp/output/* $tmp/merge
            rm -rf "$outfile"
            mv $tmp/merge "$outfile"
        else
           if [ $BASEOS == "Linux" ]; then 
            cp -r --backup=t $tmp/output/*/* $tmp/merge
           else
            cp -r $tmp/output/*/* $tmp/merge
           fi
           rm -rf "$outfile"
           mv $tmp/merge/output "$outfile"
        fi
        if [[ "$module" == "gowitness" ]]; then
            echo "Downloading gowitness databases..."
            mkdir -p "$tmp/dbs/"
            $interlace_cmd -c "axiom-scp _target_:$scan_dir/gowitness.sqlite3 $tmp/dbs/_target_.sqlite3 --cache -F=$sshconfig>> /dev/null"
            echo "Merging databases..."
            gowitness merge --input-path $tmp/ -o gowitness.sqlite3
            echo -e "${Green}RUN: '${Blue}gowitness -D gowitness.sqlite3 -P screenshots report serve${Color_Off}' for reporting"
        fi
    fi
}

###########################################################################################################
# Variable Declarations

wordlist=""
module=""
ext="default"
default_wordlist="/home/op/lists/seclists/Discovery/Web-Content/common.txt"
local_wordlist=""
user_specified_wordlist=""
cache="false"
fleet=""
threads=30
interactive=""
uid="$module+$(date +%s)"
outfile="$start/scan+$(date +%s)"
sshconfig="$AXIOM_PATH/.sshconfig"
rm_when_done="false"
spinup=0
args=""
pass=()

i=0
for arg in "$@"
do
    i=$((i+1))
    if [[  ! " ${pass[@]} " =~ " ${i} " ]]; then
        set=false
        if [[ "$i" == 1 ]]; then
            input="$1"
            set=true
            pass+=($i)
        fi
        if [[ "$arg" == "-m" ]]; then
            n=$((i+1))
            module=$(echo ${!n})

            set=true
            pass+=($i)
            pass+=($n)
        fi
        if [[ "$arg" == "--anew" ]]; then
            n=$((i+1))
            anew="true"
            set=true
            pass+=($i)
            pass+=($n)
        fi
        if [[ "$arg" == "-F" ]]; then
            n=$((i+1))
            sshconfig=$(echo ${!n})
            cache="true"
            set=true
            pass+=($i)
            pass+=($n)
        fi
        if [[ "$arg" == "--cache" ]]; then
            cache="true"
            set=true
            pass+=($i)
        fi
        if [[ "$arg" == "--rm-when-done" ]]; then
            rm_when_done="true"
            set=true
            pass+=($i)
        fi

        if [[ "$arg" == "--list" ]]; then
            list_modules
            exit
        fi
        if [[ "$arg" == "-o" ]]; then
            n=$((i+1))
            outfile=$(echo ${!n})
            set=true
            pass+=($i)
            pass+=($n)
        fi
        if [[ "$arg" == "--threads" ]]; then
            n=$((i+1))
            user_specified_threads=$(echo ${!n})
            set=true
            pass+=($i)
            pass+=($n)
        fi
        if [[ "$arg" == "-w" ]]; then
            n=$((i+1))
            user_specified_wordlist=$(echo ${!n})
            set=true
            pass+=($i)
            pass+=($n)
        fi
        if [[ "$arg" == "-wL" ]]; then
            n=$((i+1))
            local_wordlist=$(echo ${!n})
            set=true
            pass+=($i)
            pass+=($n)
        fi
        if [[ "$arg" == "-wD" ]]; then
            n=$((i+1))
            distribute_wordlist=$(echo ${!n})
            set=true
            pass+=($i)
            pass+=($n)
        fi
        if [[ "$arg" == "-oD" ]]; then
            n=$((i+1))
            ext="dir"
            outfile=$(echo ${!n})
            set=true
            pass+=($i)
            pass+=($n)
        fi 
        if [[ "$arg" == "--spinup" ]]; then
            n=$((i+1))
            spinup=$(echo ${!n})
            set=true
            pass+=($i)
            pass+=($n)
        fi

        if [[ "$arg" == "-oG" ]]; then
            n=$((i+1))
            ext="txt"
            outfile=$(echo ${!n})
            set=true
            pass+=($i)
            pass+=($n)
        fi
        if [[ "$arg" == "--fleet" ]] || [[ "$arg" == "-f" ]]; then
            n=$((i+1))
            fleet=$(echo ${!n})
            set=true
            pass+=($i)
            pass+=($n)
        fi
        if [[ "$arg" == "-oX" ]]; then
            n=$((i+1))
            ext="xml"
            outfile=$(echo ${!n})
            echo "Setting outfile to: '$outfile'"
            set=true
            pass+=($i)
            pass+=($n)
        fi
        if [[ "$arg" == "--help" ]] || [[ "$arg" == "-h" ]]; then
            help
            exit
            set=true
            pass+=($i)
        fi
        if  [[ "$set" != "true" ]]; then
            args="$args $arg"
        fi

    fi
done

reset

echo -e -n "${BWhite}"
echo "ICAgICAgICAgICAgICBfCiAgX19fXyBfXyAgX18oXylfX18gIF9fX18gX19fICAgICAgICBfX19fX19fX19fX19fXyBfX19fXwogLyBfXyBgLyB8L18vIC8gX18gXC8gX18gYF9fIFxfX19fX18vIF9fXy8gX19fLyBfXyBgLyBfX
yBcCi8gL18vIC8+ICA8LyAvIC9fLyAvIC8gLyAvIC8gL19fX19fKF9fICApIC9fXy8gL18vIC8gLyAvIC8KXF9fLF8vXy98Xy9fL1xfX19fL18vIC9fLyAvXy8gICAgIC9fX19fL1xfX18vXF9fLF8vXy8gL18vCgogICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICBAcHJ5MGNjCg==" | base64 -d
echo -e  "${Color_Off}"


if [[ ! -f $input ]]; then
	echo -e "${BRed}Input file does not exist, please specify one as the first argument... ${Color_Off}"
	help
	exit 1
fi

if [[ "$debug" == "true" ]]; then
    silent=""
fi

if [[ "$module" =~ "ffuf" ]]; then
    ext="csv"
fi

if [[ "$module" == "gowitness" ]]; then
    ext=""
fi

if [[ "$spinup" -gt 0 ]]; then
    echo -e "${Blue}Spinning up fleet with $spinup instances..${Color_Off}"
    "$AXIOM_PATH/interact/axiom-fleet" -i="$spinup"
    echo -e "${Green}Waiting 60 seconds before scan...${Color_Off}"
    sleep 60
fi

if [[ "$cache" == "false" ]]; then
    generate_sshconfig
fi

uid="$module+$(date +%s)"
tmp="$AXIOM_PATH/tmp/$uid"
mkdir -p "$tmp/input"
mkdir -p "$tmp/split"
mkdir -p "$tmp/output"
mkdir -p "$tmp/logs"

cat "$AXIOM_PATH/selected.conf" >> "$tmp/hosts"
cp "$AXIOM_PATH/selected.conf" "$tmp/selected.conf"
cp "$sshconfig" "$tmp/sshconfig" 

sshconfig="$tmp/sshconfig"

input_file="$1"
total_instances="$(wc -l "$tmp/hosts" | awk '{ print $1 }')"
lines="$(wc -l "$input_file" | awk '{ print $1 }')"

stty -echoctl
trap clean_up SIGINT SIGTERM

# Fleet
if [[ "$fleet" == "" ]]; then
    instances=$(cat "$tmp/hosts")
else
    instances=$(query_instances_cache "$fleet*")
    echo "$instances" | tr ' ' '\n' > "$tmp/hosts"
    total_instances="$(wc -l "$tmp/hosts" | awk '{ print $1 }')"
fi

if [[ "$module" == "masscan" ]]; then
    interactive="true"
fi

###########################################################################################################
# Figure out what wordlist to use - default, the module default or the user specified wordlist

module_default_wordlist="$(parse_module "$module" | jq -r '.wordlist?')"

if [[ "$module_default_wordlist" != "" ]]; then
    default_wordlist="$module_default_wordlist"
fi

if [[ "$user_specified_wordlist" != "" ]]; then
    wordlist="$user_specified_wordlist"
else
    wordlist="$default_wordlist"
fi

destination_wordlist=""
if [[ "$local_wordlist" != "" ]]; then
    if [[ -f "$local_wordlist" ]]; then
        local_wordlist_filename="$(echo "$local_wordlist" | tr '/' ' ' | awk '{ print $NF }')"
        total=$(wc -l "$tmp/selected.conf" | awk '{ print $1 }')
        destination_wordlist="/home/op/lists/$local_wordlist_filename"
        wordlist="$destination_wordlist"
    else
        echo -e "${Red}Error: file not found '$local_wordlist'...${Color_Off}"
        exit 1
    fi
fi

if [[ -f "$local_wordlist" ]]; then
    echo -e "${Green}Uploading custom local wordlist: $local_wordlist_filename to $destination_wordlist...${Color_Off}"
    interlace --silent -threads $total -tL "$tmp/selected.conf" -c "$AXIOM_PATH/interact/axiom-scp $local_wordlist  _target_:$destination_wordlist --cache -F=$sshconfig >> /dev/null"
    echo -e "${Green}Wordlist uploaded successfully!${Color_Off}"
fi

###########################################################################################################

# The command to execute on the remote host
if [[ "$ext" == "default" ]]; then
    ext="$(parse_module "$module" | jq -r '.ext')"
fi

command="$(parse_module "$module" "$ext" | jq -r '.command')"
command="$(apply_wordlist "$command" "$wordlist")"
command="$(add_extra_args "$command" "$args")"

default_threads="$(parse_module "$module" | jq -r '.threads?')"
if [[ "$default_threads" != "" ]]; then
    threads="$default_threads"
fi

if [[ "$user_specified_threads" != "" ]]; then
    threads="$user_specified_threads"
fi
# Print the command header
thread_str=""

if [[ "$command" =~ "_target_" ]]; then
    thread_str="${BWhite}Threads:${Color_Off} [ ${Red}$threads${Color_Off} ] | "
fi

echo -e "${BWhite}Module:${Color_Off} [ ${Blue}$module $args${Color_Off} ] | ${BWhite}Input:${Color_Off} [ ${Blue}$lines targets${Color_Off} ] | ${BWhite}Instances:${Color_Off} $total_instances [${Blue} $(echo $instances | tr '\n' ' ')${Color_Off}]"
echo -e "${BWhite}Command:${Color_Off} [ ${Blue}$command${Color_Off} ] | $thread_str${BWhite}Ext${Color_Off}: [${Blue}$ext${Color_Off}]"

# Destination directory on the instances and the command used to SSH to them
scan_dir="/home/op/scan/$uid"
ssh_command="ssh -F $sshconfig -o StrictHostKeyChecking=no"
interlace_cmd="$(which interlace) --silent -tL $tmp/hosts -threads $total_instances"

echo -n -e "${Blue}Building file structure...${Color_Off}"
# For single shot commands - like nikto, ffuf, or nmap with a single target
if [[ "$command" =~ "_target_" ]]; then
    $interlace_cmd --no-bar -c "$ssh_command _target_ 'mkdir -p $scan_dir/output'" >/dev/null 2>&1
    echo "$command" > "$tmp/command"
#    echo "Uploading Commands..."
    $interlace_cmd --no-bar -c "axiom-scp $tmp/command _target_:$scan_dir/command --cache -F=$sshconfig >/dev/null 2>&1" >/dev/null 2>&1
else
    # Prep the host by making the scan directory 
    $interlace_cmd -c "$ssh_command _target_ 'mkdir -p $scan_dir'" >/dev/null 2>&1
fi
echo -n -e "[ ${Green}OK${Color_Off} ]\n"

# Split up in the input file
split_file "$input_file" "$total_instances" "$tmp"

echo -e "${Blue}Uploading input files...${Color_Off}"
$interlace_cmd -c "$AXIOM_PATH/interact/axiom-scp $tmp/input/_target_ _target_:$scan_dir/input --cache -F=$sshconfig >/dev/null 2>&1; touch $tmp/logs/_target_" | grep -v "Gen" 

if [[ "$interactive" != "true" ]]; then
    tail -q -f $tmp/logs/* &
    tailPID=$!
fi

if [[ "$command" =~ "_target_" ]]; then
    # Is single shot mode 
    echo -e "${BRed}[*]${Red} ENABLING ONESHOT MODE! STARTING $(($total_instances * $threads)) TOTAL THREADS. Using $threads threads per instance with $total_instances instances...${Color_Off}"
    sleep 3
    $interlace_cmd -c "$ssh_command _target_ 'cd $scan_dir; interlace --silent -threads $threads -tL input -cL command -o output' >> $tmp/logs/_target_ 2>&1"
    $interlace_cmd -c "axiom-scp _target_:$scan_dir/output/* $tmp/output/ --cache -F=$sshconfig >/dev/null 2>&1"
else
    if [[ "$interactive" == "true" ]]; then
        $interlace_cmd -c "$ssh_command _target_ 'cd $scan_dir; $command'"
    else
        $interlace_cmd -c "$ssh_command _target_ 'cd $scan_dir; $command' >> $tmp/logs/_target_ 2>&1"
    fi
    $interlace_cmd -c "axiom-scp _target_:$scan_dir/output $tmp/output/_target_.$ext --cache -F=$sshconfig >/dev/null 2>&1"
fi

merge_output

if [[ "$rm_when_done" == "true" ]]; then
    for instance in $(cat "$tmp/selected.conf");
    do
        "$AXIOM_PATH/interact/axiom-rm" "$instance" -f
        sleep 0.4
    done
fi


mv "$AXIOM_PATH/tmp/$uid/" "$AXIOM_PATH/logs/"

end=$(date +%s)
runtime=$((end-begin))
time=$(formatSeconds $runtime)

echo -e "${Blue}Module [ $module $args ] | Time: [ $time ] | Input: [ $lines targets ]${Color_Off}"
echo -e "${BGreen}Output saved to '${Blue}$outfile${BGreen}'! Local logs saved to '${Blue}$AXIOM_PATH/logs/$uid${BGreen}'! ${BGreen}Remote logs saved to '${Blue}/home/op/scan/$uid${BGreen}'!"
echo "{\"module\":\"$module\",\"args\":\"$args\",\"targets\":\"$lines\",\"results\":\"$res\",\"seconds\":\"$runtime\",\"instances\":\"$total_instances\",\"commmand\":\"$command\",\"time\":\"$time\"}" >> $AXIOM_PATH/stats.log
#axiom-exec "lsof /home/op/scan/${uid}/  | cut -d ' ' -f 2 | xargs sudo kill" -q
kill -9 $tailPID
