#!/bin/bash

AXIOM_PATH="$HOME/.axiom"
source "$AXIOM_PATH/interact/includes/vars.sh"
source "$AXIOM_PATH/interact/includes/functions.sh"
source "$AXIOM_PATH/interact/includes/system-notification.sh"
begin=$(date +%s)

function list_modules() {
	echo -e "${Green}Available Modules:${Color_Off}"
	echo -e -n "${Blue}"
	find "$AXIOM_PATH/modules" -name "*.json" | tr '/' ' ' | awk '{ print $NF }' | cut -d "." -f1
	echo -e -n "${Color_Off}"
}

function parse_module() {
	module="$1"
	ext="$2"

	if [[ -f "$AXIOM_PATH/modules/$module.json" ]]; then
		if [[ "$ext" != "" ]]; then
			cat "$AXIOM_PATH/modules/$module.json" | jq -r ".[] | select(.ext==\"$ext\")"
		else
			cat "$AXIOM_PATH/modules/$module.json" | jq -r ".[0]"
		fi
	else
		echo -e "${BRed}Module '$module' does not exist...${Color_Off}"
		list_modules
	fi
}

function help() {
	echo -e "${BWhite}Usage of axiom-scan${Color_Off}"
	echo -e "Example Usage: ${Blue}axiom-scan ips.txt -m nmap -T4 --top-ports 2000 -oX output.xml${Color_Off}"
	echo -e "  <input> string"
	echo -e "    Input file, supplied as a positional first argument"
	echo -e "  -m string"
	echo -e "    Module to use to scan (e.g masscan, nmap, gowitness, ffuf)"
	echo -e "  -o string"
	echo -e "    Output to default output (whatever that is for the module)"
	echo -e "  -oX string"
	echo -e "    Output in XML/HTML, supported in (nmap & masscan)"
	echo -e "  -oG string"
	echo -e "    Output to greppable output (will merge and sort unique)"
	echo -e "  --fleet string (optional)"
	echo -e "    Fleet to use, will use axiom-select by default."
    echo -e "  --debug"
    echo -e "    Enable debug mode (VERY VERBOSE!)"
    echo -e "  --quiet"
	echo -e "    Enable quiet mode"
	echo -e "  --help"
	echo -e "    Display this help menu"
	echo -e "  <additional args>"
	echo -e "    If you want additional arguments supplied to your command, simply append them to the command!"
}
PID=""
tailPID=""
clean_up() {
    # Perform program exit housekeeping
	if [[ "$command" =~ "_target_" ]]; then
		interlace --silent -threads $total -tL "$AXIOM_PATH/selected.conf" -c "axiom-scp _target_:output/* $tmp/output/ --cache >> /dev/null"
	else
		kill -9 $tailPID   
		wait $! 2>/dev/null
		interlace $silent -tL $tmp/hosts -c "axiom-scp _target_:output $tmp/output/_target_.$ext --cache  >/dev/null 2>&1"
	fi
    merging_output
    exit $1
}

module="masscan"
# User controlled
fleet_name=""
input=""
outfile="output.txt"
args=""
ext=""
debug=""
quiet=""
silent="--silent" 
anew="false"

threads="30"

pass=()

i=0
for arg in "$@"
do
	i=$((i+1))
	if [[  ! " ${pass[@]} " =~ " ${i} " ]]; then
	set=false
	if [[ "$i" == 1 ]]; then
		input="$1"
		set=true
		pass+=($i)
	fi
	if [[ "$arg" == "-m" ]]; then
		n=$((i+1))
		module=$(echo ${!n})
        #if [[ "$quiet" != "true" ]]; then
		#echo -e "${Blue}Selecting module '$module'${Color_Off}"
        #fi
		set=true
		pass+=($i)
		pass+=($n)
	fi
    if [[ "$arg" == "--anew" ]]; then
		n=$((i+1))
        anew="true"
		set=true
		pass+=($i)
		pass+=($n)
	fi

	if [[ "$arg" == "-o" ]]; then
		n=$((i+1))
		outfile=$(echo ${!n})
		set=true
		pass+=($i)
		pass+=($n)
	fi
	if [[ "$arg" == "--threads" ]]; then
		n=$((i+1))
		threads=$(echo ${!n})
		set=true
		pass+=($i)
		pass+=($n)
	fi

	if [[ "$arg" == "-oG" ]]; then
		n=$((i+1))
		ext="txt"
		outfile=$(echo ${!n})
		set=true
		pass+=($i)
		pass+=($n)
	fi
	if [[ "$arg" == "--fleet" ]] || [[ "$arg" == "-f" ]]; then
		n=$((i+1))
		fleet=$(echo ${!n})
		set=true
		pass+=($i)
		pass+=($n)
	fi

	if [[ "$arg" == "-oX" ]]; then
		n=$((i+1))
		ext="xml"
		outfile=$(echo ${!n})
		echo "Setting outfile to: '$outfile'"
		set=true
		pass+=($i)
		pass+=($n)
	fi
	if [[ "$arg" == "--quiet" ]]; then
	    quiet="true"
		set=true
		pass+=($i)
	fi
    if [[ "$arg" == "--debug" ]]; then
	    debug="true"
		set=true
		pass+=($i)
	fi

	if [[ "$arg" == "--help" ]] || [[ "$arg" == "-h" ]]; then
		help
		exit
		set=true
		pass+=($i)
	fi

	if  [[ "$set" != "true" ]]; then
		args="$args $arg"
	fi

	fi
done

if [[ "$module" == "ffuf" ]]; then
	ext="csv"
fi

if [[ ! -f $input ]]; then
	echo -e "${BRed}File does not exist, please specify one as the first argument... ${Color_Off}"
	help
	exit 1
fi

if [[ "$debug" == "true" ]]; then
    silent=""
fi

#command="sudo masscan -iL input -p80 --rate=100000 -oG output"
#command="nmap -T5 -p80 -iL input -oX output"
#command="cat input | /home/op/bin/ffuz -s -o output"
#command="rm -rf output; mkdir -p output; /home/op/go/bin/gowitness file -f input -P output"

mod_data=$(parse_module $module $ext)
command_data=$(echo $mod_data | jq -r '.command')
command=""

if [[ "$command_data" =~ ">" ]]; then
	first=$(echo $command_data | cut -d ">" -f 1)
	output=$(echo $command_data | cut -d ">" -f 2)

	command="$first $args > $output"
else
	command="$command_data $args"
fi

ext=$(echo $mod_data | jq -r '.ext')

####################################################################


# Fleet
if [[ "$fleet_name" == "" ]]; then
	instances=$(cat "$AXIOM_PATH/selected.conf")
else
	instances=$(query_instances_cache "$fleet_name*")
fi


# Setup tmp
uid=$(date +%s)
tmp="$HOME/.axiom/tmp/$uid"
mkdir -p $tmp/input/
mkdir -p $tmp/output/
mkdir -p $tmp/logs/
mkdir -p $AXIOM_PATH/logs/
start=$(pwd)

echo -e -n "${BWhite}"
echo "ICAgICAgICAgICAgICBfCiAgX19fXyBfXyAgX18oXylfX18gIF9fX18gX19fICAgICAgICBfX19fX19fX19fX19fXyBfX19fXwogLyBfXyBgLyB8L18vIC8gX18gXC8gX18gYF9fIFxfX19fX18vIF9fXy8gX19fLyBfXyBgLyBfXyBcCi8gL18vIC8+ICA8LyAvIC9fLyAvIC8gLyAvIC8gL19fX19fKF9fICApIC9fXy8gL18vIC8gLyAvIC8KXF9fLF8vXy98Xy9fL1xfX19fL18vIC9fLyAvXy8gICAgIC9fX19fL1xfX18vXF9fLF8vXy8gL18vCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAcHJ5MGNjCg==" | base64 -d
echo -e  "${Color_Off}"

function formatSeconds (){
	declare format='%02dh:%02dm:%02ds'         # time format hh:mm:sshconfig
	declare timepassed=$1
	declare seconds minutes hours

	((seconds=timepassed%60))
	((minutes=timepassed/60))
	((hours=minutes/60))
	((minutes=minutes%60))
	printf "$format" $hours $minutes $seconds
}

stty -echoctl
trap clean_up SIGHUP SIGINT SIGTERM

##############################################################################
#### Splitting
#echo "Splitting file sequence..."

# If available use nmap to expand CIDR targets to a list of IP address
if nmap -h 1>/dev/null 2>/dev/null; then
	#nmap is avaialble so use it to split the input file to a list of IPs and shuffle
	#echo "Expanding CIDR(s) using nmap and shuffling..."
	nmap -n -sL -iL $input | awk '/Nmap scan report for/ {print $5}' | shuf > $tmp/targets
else
	# nmap unavailable so just shuffle input as is and output to $tmp/targets
	#echo "Shuffling..."
	cat $input | shuf > $tmp/targets
fi

fleet_size=$(echo $instances | tr ' ' '\n' | wc -l| awk '{ print $1 }')
divisor=$fleet_size
lines=$(wc -l "$tmp/targets" | awk '{ print $1 }')

echo -e "${BWhite}Module:${Color_Off} [ ${Blue}$module $args${Color_Off} ] | ${BWhite}Input:${Color_Off} [ ${Blue}$lines targets${Color_Off} ] | ${BWhite}Instances:${Color_Off} $fleet_size [${Blue} $(echo $instances | tr '\n' ' ')${Color_Off}]"
echo -e "${BWhite}Command:${Color_Off} [ ${Blue}$command${Color_Off} ] | ${BWhite}Ext${Color_Off}: [${Blue}$ext${Color_Off}]"

$AXIOM_PATH/interact/axiom-ssh --just-generate
if [[ $fleet_size -lt 1 ]]; then
	echo -e "${BRed}Your fleet is either too small or doesn't exist, use axiom-fleet -i=5 to spin one up!${Color_Off}"
	exit 1
fi

lines_per_file=$(expr $lines / $divisor)

# Add an extra line per file if it isn't divisible equally (spreads them out equally across an odd / even number of fleet)
[[ $(expr $lines % $divisor) != 0 ]] && lines_per_file=$(expr $lines_per_file + 1)

#echo "Splitting."
cd $tmp && split -l $lines_per_file targets && rm targets && cd $start

# Rename "xaa" etc  to 1 2 3 4 5
i=1
for f in $(find $tmp/ -type f | tr '/' ' ' | awk '{ print $NF }')
do
	instance="$(echo $instances | awk "{ print \$$i }")"
	i=$((i+1))
	
	mv "$tmp/$f" "$tmp/input/$instance"
done

total=$i
echo $instances | tr ' ' '\n' > $tmp/hosts

##############################################################################
### Merging output
merging_output() {
    if [[ "$anew" != "true" ]];  then
        rm -rf $outfile
    fi
    if [[ "$ext" == "txt" ]]; then
        echo "Mode set to txt.. Sorting unique."
        cat $tmp/output/* | sort -u > $tmp/merge
       
        if [[ "$anew" == "true" ]]; then
            cat "$tmp/merge" | anew "$outfile"
        else
            mv "$tmp/merge" "$outfile"
        fi

    elif [[ "$ext" == "xml" ]]; then
        echo "Mode set to XML.. Merging Nmap XML output..."
        "$AXIOM_PATH/interact/merge-xml.py" -d "$tmp/output" -o "$tmp/merge.xml" >> /dev/null
        mv "$tmp/merge.xml" "$outfile"
        mv "$tmp/merge.xml.html" "$outfile.html"
    elif [[ "$ext" == "csv" ]]; then
        echo "Mode set to CSV, merging..."
        header="$(cat $tmp/output/* | head -n 1)"
        echo "$header" > "$outfile" 
        cat $tmp/output/* | grep -v "$header" | sort -u -V >> $outfile
    elif [[ "$ext" == "" ]];  then
        echo "Mode set to directory... Merging directories..."
        mkdir $tmp/merge
        cp -r $tmp/output/*/* $tmp/merge
        rm -rf $outfile
        mv $tmp/merge/output $outfile
        if [[ "$module" == "gowitness" ]]; then
                echo "Downloading gowitness databases..."
                mkdir -p "$tmp/dbs/"
                interlace $silent -tL $tmp/hosts -c "axiom-scp _target_:gowitness.sqlite3 $tmp/dbs/_target_.sqlite3 --cache >> /dev/null"
                echo "Merging databases..."
                gowitness merge --input-path $tmp/ -o gowitness.sqlite3
                echo -e "${Green}RUN: '${Blue}gowitness -D gowitness.sqlite3 -P screenshots report serve${Color_Off}' for reporting"
        fi
fi

cd "$tmp"
tar -czf "$uid.tar.gz" logs/
mv "$uid.tar.gz" "$AXIOM_PATH/logs/$uid.tar.gz"
rm -rf "$tmp"
end=$(date +%s)

runtime=$((end-begin))
time=$(formatSeconds $runtime)
echo -e "${Blue}Module [ $module $args ] | Time: [ $time ] | Input: [ $lines targets ]${Color_Off}"
echo -e "${BGreen}Output successfully saved to '${Blue}$outfile${BGreen}'! Logs are stored at '${Blue}$AXIOM_PATH/logs/$uid.tar.gz${Color_Off}'"
}
function oneshot() {
	trap clean_up SIGINT
    
    infile="$1"
    outfile="$2"
    command="$3"

    total=$(cat "$AXIOM_PATH/selected.conf" | wc -l | awk '{ print $1 }')
    threads=$(echo "$total * $threads" | bc -l)

    mkdir -p "$tmp"
    echo -e -n "${BWhite}Cleaning up fleet... ${Color_Off}"
    interlace --silent --no-bar -tL $tmp/hosts -c "ssh -F $AXIOM_PATH/.sshconfig -o StrictHostKeyChecking=no _target_ \"sudo rm -rf input output gowitness.sqlite3 >> /dev/null\"" > /dev/null 2>&1
    interlace --silent --no-bar -tL $tmp/hosts -c "touch $tmp/logs/_target_" -threads $fleet_size >/dev/null 2>&1 
    echo -e "[ ${Green}OK${Color_Off} ]"

    echo -e "${BWhite}Scanning...${Color_Off}"
    interlace --silent -tL "$infile" -pL "$AXIOM_PATH/selected.conf" -c "axiom-exec 'mkdir -p output; $command' '_proxy_' -q  --cache | tee $tmp/logs/_proxy_" -threads $threads
    echo -e "${Blue}Dowloading results${Color_Off}"
    interlace --silent -threads $total -tL "$AXIOM_PATH/selected.conf" -c "axiom-scp _target_:output/* $tmp/output/ --cache >> /dev/null"
    merging_output
    if [[ "$ext" == "" ]]; then
		res=$(ls -l $start/$outfile/ | wc -l | awk '{ print $1 }')
	else
		res=$(wc -l $start/$outfile | awk '{ print $1 }')
	fi

    echo "{\"module\":\"$module\",\"args\":\"$args\",\"targets\":\"$lines\",\"results\":\"$res\",\"seconds\":\"$runtime\",\"instances\":\"$fleet_size\",\"commmand\":\"$command\", \"time\":\"$time\"}" >> $AXIOM_PATH/stats.log

}


##############################################################################
### The real meat of the scan...

if [[ "$command" =~ "_target_" ]]; then
    echo -e "${BRed}[*]${Red} ENABLING ONESHOT MODE! Using $threads threads per instance...${Color_Off}" 
    oneshot "$input" "$outfile" "$command" 
    exit 0
fi


interactive=false

if [[ "$module" == "masscan" ]]; then
	echo "setting interactive"
	interactive=true
fi


if [[ "$quiet" != "true" ]]; then
    echo -e -n "${BWhite}Cleaning up fleet... ${Color_Off}"
    interlace --silent --no-bar -tL $tmp/hosts -c "ssh -F $AXIOM_PATH/.sshconfig -o StrictHostKeyChecking=no _target_ \"sudo rm -rf input output gowitness.sqlite3 >> /dev/null\"" > /dev/null 2>&1
    interlace --silent --no-bar -tL $tmp/hosts -c "touch $tmp/logs/_target_" -threads $fleet_size >/dev/null 2>&1 
    echo -e "[ ${Green}OK${Color_Off} ]"

    echo -e "${BWhite}Uploading input files to fleet...${Color_Off}"
    interlace $silent -tL $tmp/hosts -c "axiom-scp $tmp/input/_target_ _target_:input --cache  >/dev/null 2>&1"
    echo -e "${Blue}Files uploaded...${Color_Off}"
    echo ""

	echo -e "${BWhite}Running jobs against specified targets... (To view logs: $tmp)${Color_Off}"

	if [[ "$interactive" == "false" ]]; then
		tail -q -f $tmp/logs/* &
		tailPID=$!

		interlace $silent -tL $tmp/hosts -c "ssh -F $AXIOM_PATH/.sshconfig _target_ \"$command 2>&1\" 2>&1 >> $tmp/logs/_target_" -threads $fleet_size 

		kill -9 $tailPID > /dev/null 2>&1 
		wait $! 2>/dev/null
	else
		interlace $silent -tL $tmp/hosts -c "ssh -F $AXIOM_PATH/.sshconfig _target_ \"$command\" | tee $tmp/logs/_target_" -threads $fleet_size
	fi
    echo -e "${Blue}Scan complete...${Color_Off}"

    echo ""
    echo -e "${BWhite}Downloading output from fleet...${Color_Off}"
    interlace $silent -tL $tmp/hosts -c "axiom-scp _target_:output $tmp/output/_target_.$ext --cache  >/dev/null 2>&1"
    echo -e "${Green}Files downloaded...${Color_Off}"
    if [[ "$ext" == "" ]]; then
		res=$(ls -l $start/$outfile/ | wc -l | awk '{ print $1 }')
	else
		res=$(wc -l $start/$outfile | awk '{ print $1 }')
	fi

    echo "{\"module\":\"$module\",\"args\":\"$args\",\"targets\":\"$lines\",\"results\":\"$res\",\"seconds\":\"$runtime\",\"instances\":\"$fleet_size\",\"commmand\":\"$command\", \"time\":\"$time\"}" >> $AXIOM_PATH/stats.log
    merging_output
else
    interlace $silent -tL $tmp/hosts -c "ssh -F $AXIOM_PATH/.sshconfig -o StrictHostKeyChecking=no _target_ \"sudo rm -rf input output gowitness.sqlite3 >> /dev/null\"" >/dev/null 2>&1
    interlace $silent -tL $tmp/hosts -c "axiom-scp $tmp/input/_target_ _target_:input --cache  >/dev/null 2>&1" >/dev/null 2>&1
    echo -e "${BWhite}Running module '$module' against specified targets...${Color_Off}"
    interlace --silent --no-bar -tL $tmp/hosts -c "touch $tmp/logs/_target_" -threads $fleet_size > /dev/null 2>&1
    interlace $silent -tL $tmp/hosts -c "ssh -F $AXIOM_PATH/.sshconfig _target_ \"$command 2>&1\" >> $tmp/logs/_target_ 2>&1" -threads $fleet_size 
    interlace $silent -tL $tmp/hosts -c "axiom-scp _target_:output $tmp/output/_target_.$ext --cache  >/dev/null 2>&1" >/dev/null 2>&1
    merging_output >/dev/null 2>&1
	
	runtime=$((end-begin))
	time=$(formatSeconds $runtime)
	echo -e "${Blue}Successfully scanned $lines targets using module $module in $time!${Color_Off}"
	res=0
	if [[ "$ext" == "" ]]; then
		res=$(ls -l $start/$outfile/ | wc -l | awk '{ print $1 }')
	else
		res=$(wc -l $start/$outfile | awk '{ print $1 }')
	fi
    echo "{\"module\":\"$module\",\"args\":\"$args\",\"targets\":\"$lines\",\"results\":\"$res\",\"seconds\":\"$runtime\",\"instances\":\"$fleet_size\",\"commmand\":\"$command\", \"time\":\"$time\"}" >> $AXIOM_PATH/stats.log
	echo -e "${Blue}Module [ $module $args ] | Time: [ $time ] | Input: [ $lines targets ]${Color_Off}"
	echo -e "${BGreen}Output saved to '${Blue}$outfile${BGreen}'! Logs are stored at '${Blue}$AXIOM_PATH/logs/$uid.tar.gz${Color_Off}'"
fi
