#!/bin/bash

AXIOM_PATH="$HOME/.axiom"

cat << EOF

 ▄▄▄      ▒██   ██▒ ██▓ ▒█████   ███▄ ▄███▓
▒████▄    ▒▒ █ █ ▒░▓██▒▒██▒  ██▒▓██▒▀█▀ ██▒
▒██  ▀█▄  ░░  █   ░▒██▒▒██░  ██▒▓██    ▓██░
░██▄▄▄▄██  ░ █ █ ▒ ░██░▒██   ██░▒██    ▒██
 ▓█   ▓██▒▒██▒ ▒██▒░██░░ ████▓▒░▒██▒   ░██▒
 ▒▒   ▓▒█░▒▒ ░ ░▓ ░░▓  ░ ▒░▒░▒░ ░ ▒░   ░  ░
  ▒   ▒▒ ░░░   ░▒ ░ ▒ ░  ░ ▒ ▒░ ░  ░      ░
  ░   ▒    ░    ░   ▒ ░░ ░ ░ ▒  ░      ░
      ░  ░ ░    ░   ░      ░ ░         ░

The Dynamic Infrastructure Framework - @pry0cc

Sponsored by SecurityTrails
Sign up during bug bounty hunter month now!: https://securitytrails.com/bug-bounty-hunters-toolkit?referral_code=axiom

EOF

echo -e "${Blue}Hello! Welcome to Axiom configuration :)"
echo -e "Press enter to install dependencies and begin installation!${Color_Off}"
read
echo -e "${Blue}INSTALLING AXIOM...${Color_Off}"
sleep 1

echo -e "${BWhite}Installing deps! Please wait :) ${Color_Off}"
BASEOS="$(uname)"
case $BASEOS in
'Linux')
    BASEOS='Linux'
    ;;
'FreeBSD')
    BASEOS='FreeBSD'
    alias ls='ls -G'
    ;;
'WindowsNT')
    BASEOS='Windows'
    ;;
'Darwin')
    BASEOS='Mac'
    ;;
'SunOS')
    BASEOS='Solaris'
    ;;
'AIX') ;;
*) ;;
esac

if [ $BASEOS == "Linux" ]; then
    if $(uname -a | grep -qi "Microsoft"); then
        OS="UbuntuWSL"
    else
        if ! command -v lsb_release &> /dev/null; then
            echo "lsb_release could not be found, unable to determine your distribution"
            echo "If you are using Arch, please get lsb_release from AUR"
            exit 1
        fi
        OS=$(lsb_release -i | awk '{ print $3 }')
    fi

    if [ $OS == "Arch" ] || [ $OS == "ManjaroLinux" ]; then
        echo -e "${Blue}Congrats, you run arch..."
        sudo pacman -S fzf packer jq doctl mmv
    elif [ $OS == "Ubuntu" ] || [ $OS == "Debian" ] || [ $OS == "Linuxmint" ] || [ $OS == "Parrot" ] || [ $OS == "Kali" ]; then
        echo -e "${Blue}Installing other repo deps...${Color_Off}"
        sudo apt-get update && sudo apt-get install mmv fzf git ruby python3-pip curl net-tools unzip xsltproc bc uuid-runtime rsync
        echo -e "${Blue}Installing jq...${Color_Off}"
        sudo wget -O /usr/bin/jq https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 && sudo chmod +x /usr/bin/jq
        echo -e "${Blue}Installing packer...${Color_Off}"
        wget -O /tmp/packer.zip https://releases.hashicorp.com/packer/1.5.6/packer_1.5.6_linux_amd64.zip && cd /tmp/ && unzip packer.zip && sudo mv packer /usr/bin/ && rm /tmp/packer.zip
        echo -e "${Blue}Installing Interlace...${Color_Off}"
        git clone https://github.com/codingo/Interlace.git /tmp/interlace
        cd /tmp/interlace && sudo python3 setup.py install
        echo -e "${Blue}Installing doctl...${Color_Off}"
        wget -O /tmp/doctl.tar.gz https://github.com/digitalocean/doctl/releases/download/v1.45.0/doctl-1.45.0-linux-amd64.tar.gz && tar -xvzf /tmp/doctl.tar.gz && sudo mv doctl /usr/bin/doctl && rm /tmp/doctl.tar.gz
        echo -e "${Blue}Installing azure az...${Color_Off}"
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
        echo -e "${Blue}Installing gowitness...${Color_Off}"
        sudo wget -O /usr/bin/gowitness https://github.com/sensepost/gowitness/releases/download/2.2.0/gowitness-2.2.0-linux-amd64 && sudo chmod +x /usr/bin/gowitness

	elif [ $OS == "Fedora" ]; then
      	echo -e "${Blue}Installing other repo deps...${Color_Off}"
		    sudo dnf update && sudo dnf -y mmv install bc fzf git rubypick python3-pip curl net-tools unzip util-linux
		    echo -e "${Blue}Installing jq...${Color_Off}"
		    sudo wget -O /usr/bin/jq https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 && sudo chmod +x /usr/bin/jq
		    echo -e "${Blue}Installing packer...${Color_Off}"
		    wget -O /tmp/packer.zip https://releases.hashicorp.com/packer/1.5.6/packer_1.5.6_linux_amd64.zip && cd /tmp/ && unzip packer.zip && sudo mv packer /usr/bin/ && rm /tmp/packer.zip
		    echo -e "${Blue}Installing doctl...${Color_Off}"
		    wget -O /tmp/doctl.tar.gz https://github.com/digitalocean/doctl/releases/download/v1.45.0/doctl-1.45.0-linux-amd64.tar.gz && tar -xvzf /tmp/doctl.tar.gz && sudo mv doctl /usr/bin/doctl && rm /tmp/doctl.tar.gz
            echo -e "${Blue}Installing gowitness...${Color_Off}"
            sudo wget -O /usr/bin/gowitness https://github.com/sensepost/gowitness/releases/download/2.2.0/gowitness-2.2.0-linux-amd64 && sudo chmod +x /usr/bin/gowitness
	elif [ $OS == "UbuntuWSL" ]; then
        echo -e "${Blue}Installing other repo deps...${Color_Off}"
        sudo apt-get update && sudo apt-get install mmv fzf git ruby python3-pip curl net-tools unzip xsltproc bc uuid-runtime
        echo -e "${Blue}Installing jq...${Color_Off}"
        sudo wget -O /usr/bin/jq https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 && sudo chmod +x /usr/bin/jq
        echo -e "${Blue}Installing packer...${Color_Off}"
        wget -O /tmp/packer.zip https://releases.hashicorp.com/packer/1.5.6/packer_1.5.6_linux_amd64.zip && cd /tmp/ && unzip packer.zip && sudo mv packer /usr/bin/ && rm /tmp/packer.zip
        echo -e "${Blue}Installing Interlace...${Color_Off}"
        git clone https://github.com/codingo/Interlace.git /tmp/interlace
        cd /tmp/interlace && sudo python3 setup.py install
        echo -e "${Blue}Installing doctl...${Color_Off}"
        wget -O /tmp/doctl.tar.gz https://github.com/digitalocean/doctl/releases/download/v1.45.0/doctl-1.45.0-linux-amd64.tar.gz && tar -xvzf /tmp/doctl.tar.gz && sudo mv doctl /usr/bin/doctl && rm /tmp/doctl.tar.gz
        echo -e "${Blue}Installing azure az...${Color_Off}"
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
        echo -e "${Blue}Installing gowitness...${Color_Off}"
        sudo wget -O /usr/bin/gowitness https://github.com/sensepost/gowitness/releases/download/2.2.0/gowitness-2.2.0-linux-amd64 && sudo chmod +x /usr/bin/gowitness
	fi
fi


if [ $BASEOS == "Mac" ]; then
         whereis brew
  if [ ! $? -eq 0 ] || [[ ! -z ${AXIOM_FORCEBREW+x} ]]; then
         echo -e "${Blue}Installing brew...${Color_Off}"
         /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
  else
         echo -e "${Blue}Checking for brew... already installed, skipping installation.${Color_Off}"
         echo -e "${Blue}    Note: You can force brew installation by running${Color_Off}"
         echo -e '    $ AXIOM_FORCEBREW=yes $HOME/.axiom/interact/axiom-configure'
  fi
         echo -e "${Blue}Installing doctl...${Color_Off}"
         brew install doctl
         echo -e "${Blue}Installing go...${Color_Off}"
         brew install golang
         echo -e "${Blue}Installing jq...${Color_Off}"
         brew install jq
         echo -e "${Blue}Installing coreutils...${Color_Off}"
         brew install coreutils
         echo -e "${Blue}Installing packer...${Color_Off}"
         mkdir -p $(go env GOPATH)/src/github.com/hashicorp && cd $_
         sudo rm -r packer/ ; git clone https://github.com/hashicorp/packer.git
         echo -e "${Blue}Installing Python3...${Color_Off}"
         brew install python3
         echo -e "${Blue}Installing MMV...${Color_Off}"
         brew install mmv
         cd packer
         make dev
         export PATH=$PATH:$(go env GOPATH)/bin
         source ~/.bash_profile
fi


#install go
if ! [ -x "$(command -v go)" ]; then
       echo -e "${Blue}It looks like go is not installed, would you like to install it now${Color_Off}"
       PS3="Please select an option : "
       choices=("yes" "no")
       select choice in "${choices[@]}"; do
       case $choice in
       yes)

       echo -e "${Blue}Installing Golang${Color_Off}"
       wget https://golang.org/dl/go1.16.3.linux-amd64.tar.gz
       sudo tar -C /usr/local -xzf go1.16.3.linux-amd64.tar.gz 
       rm go1.16.3.linux-amd64.tar.gz
       mkdir -p "${HOME}/go"
       export GOPATH=$HOME/go
       export PATH=$GOPATH/bin:/usr/local/go/bin:$PATH    
       echo "export GOPATH=\$HOME/go" >> ${HOME}/.bashrc
       echo "export PATH=\$GOPATH/bin:/usr/local/go/bin:$PATH" >> ${HOME}/.bashrc
       source ${HOME}/.bashrc
       sleep 1
       break
       ;;
       no)
       echo -e "${Red}Please install go after running axiom-build"
       sleep 1
       break
       ;;
   esac 
   done
fi


if [ ! -d $AXIOM_PATH ]; then
    echo -e "${Blue}Installing axiom scripts...${Color_Off}"
    git clone https://github.com/pry0cc/axiom $AXIOM_PATH
else
    cd $AXIOM_PATH && git pull
fi

mkdir -p "${HOME}/.axiom/tmp/"
"$AXIOM_PATH/interact/account-helpers/generate_amass.sh"

echo -e "${Blue}Configuring your cloud account...${Color_Off}"
$AXIOM_PATH/interact/axiom-account-setup

if [ -f ~/.ssh/id_rsa.pub ] || [ -f ~/.ssh/id_ed25519.pub ]; then
    echo -e "${Blue}Detected SSH public key, would you like me to install this for your axiom setup? y/n ${Color_Off}"
    read ans
    if [ $ans == "y" ]; then
        if [ -f ~/.ssh/id_rsa.pub ]; then
            cat ~/.ssh/id_rsa.pub >$AXIOM_PATH/configs/authorized_keys
        elif [ -f ~/.ssh/id_ed25519.pub ]; then
            cat ~/.ssh/id_ed25519.pub >$AXIOM_PATH/configs/authorized_keys
        fi
    else    
        echo -e "${Blue}Would you like to generate a fresh pair? y/n ${Color_Off}"
        read ans
        if [ $ans == "y" ]; then
            ssh-keygen
            cat ~/.ssh/id_rsa.pub >$AXIOM_PATH/configs/authorized_keys
        
        else
            echo -e "${Blue}Need to provide SSH public key. Exiting...  ${Color_Off}"
            exit 0
        fi

    fi
else
    echo -e "${Blue}No SSH public key detected, would you like to generate a fresh pair? y/n ${Color_Off}"
    read ans
    if [ $ans == "y" ]; then
        ssh-keygen
        cat ~/.ssh/id_rsa.pub >$AXIOM_PATH/configs/authorized_keys
    else
            echo -e "${Blue}Need to provide SSH public key. Exiting...  ${Color_Off}"
            exit 0
    fi
fi

if [ "$SHELL" == "/usr/local/bin/zsh" ] || [ "$SHELL" == "/usr/bin/zsh" ] || [ "$SHELL" == "/bin/zsh" ]; then
    echo -e "${Green}You're running ZSH! Installing Axiom to \$PATH...${Color_Off}"
    echo "export PATH=\"\$PATH:\$HOME/.axiom/interact\"" >>~/.zshrc
    echo "source $HOME/.axiom/functions/autocomplete.zsh" >>~/.zshrc
    echo "compdef _axiom-ssh axiom-rm" >>~/.zshrc
    echo "compdef _axiom-ssh axiom-ssh" >>~/.zshrc
    echo "compdef _axiom-ssh axiom-select" >>~/.zshrc
    echo "compdef _axiom-ssh axiom-backup" >>~/.zshrc
    echo "compdef _axiom-ssh axiom-vpn" >>~/.zshrc
    echo "compdef _axiom-restore axiom-restore" >>~/.zshrc
    echo "compdef _axiom-deploy axiom-deploy" >>~/.zshrc
  source ~/.zshrc

elif [ "$SHELL" == "/bin/bash" ]; then
    echo -e "${Green}You're running Bash! Installing Axiom to \$PATH...${Color_Off}"
    echo "export PATH=\"\$PATH:\$HOME/.axiom/interact\"" >>~/.bashrc
    echo "[[ -f ~/.bashrc ]] && . ~/.bashrc" >> ${HOME}/.bash_profile
    source ~/.bashrc
else
    echo -e "${Red}I don't have a predefined setup for your shell!"
    echo "Please add $AXIOM_PATH/interact to your \$PATH! ${Color_Off}"
    echo "(export PATH=\"\$PATH:$HOME/.axiom/interact\")"
fi

export PATH="$PATH:$HOME/.axiom/interact"

echo -e "${BWhite}Beginning first packer build...${Color_Off}"
cd $AXIOM_PATH/
$AXIOM_PATH/interact/axiom-build
cd
